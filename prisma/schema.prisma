generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vessel {
  id          String    @id @default(cuid())
  shortId     String    @unique
  name        String
  description String?
  permissions Permission[]

  @@map("vessel")
}

model Permission {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  vesselId  String
  vessel    Vessel    @relation(fields: [vesselId], references: [id], onDelete: Cascade)

  @@unique([userId, vesselId])
  @@map("permission")
}

enum Role {
  USER
  ADMIN
}

model User {
  id                      String                   @id
  name                    String
  email                   String
  emailVerified           Boolean
  role                    Role                     @default(USER)
  image                   String?
  createdAt               DateTime
  updatedAt               DateTime
  sessions                Session[]
  accounts                Account[]
  permissions             Permission[]
  notificationPreferences NotificationPreference?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model PushSubscription {
  id            String   @id @default(cuid())
  endpoint      String   @unique
  subscription  Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("push_subscriptions")
}

model NotificationPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications Boolean  @default(true)
  pushNotifications Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@map("notification_preferences")
}